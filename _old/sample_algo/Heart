#!/usr/bin/env python3                                                          

import sys
import math
import os.path
from math import *
from numpy import log as ln
import datetime


#ICAR = index de risque cardiaque
#CEC = (patient sous assistance de type CEC(ECMO, ECLS)
#DRG = Patient traité par des drogues inotropes en intraveineux
#if (CEC == true || DRG == true): max else Jour
#
#F_RisquePreGRFj = fonction de risque pré-freffe en liste d'attente du jour
#CAT ?? SIAV->'b' ??? coeur artificiel total ? Sacubitril et Valsartan ?
#Delai_Var_Bio_LA ???LA -> liste d'attente 30j
#DIA ??? Dialyse rénale chronique ?
#CREAT ? -> Créatininémie (+Date) 30j? 8j?
#BILI ?? Billrubine ??

class Heart:
    def __init__(self):
        self.C_ICAR = 1.301335 * 0 + 0.157691 * 1 - 0.510058 * ln(150) + 0.615711 * ln(5);
        self.CS_PROBNP = [928, 1478, 2044, 2661, 3416, 4406, 5645, 8000, 11332];
        self.CS_BNP = [189, 314, 481, 622, 818, 1074, 1317, 1702, 2696];
        
        self.CEC = None;
        self.DRG = None;

        self.BNP = None;
        self.PROBNP = None;
        self.dateBNP = datetime.datetime.now(); #
        self.datePROBNP = datetime.datetime.now();#
        self.Delai_Var_Bio_LA = 42;# 30j ou 8j à vérifier

        self.DIA = None;
        self.CREAT = None;
        self.dateCREAT = datetime.datetime.now();
        
        self.age = None;
        self.sex = None;

        self.BILI = None;
        self.dateBILI = datetime.datetime.now();

        #ask only if CEC OR DRG
        self.AV_BNP = None;
        self.AV_dateBNP = datetime.datetime.now();
        self.AV_PROBNP = None;
        self.AV_datePROBNP = datetime.datetime.now();
        self.AV_DIA = None;
        self.AV_CREAT = None;
        self.AV_dateCREAT = datetime.datetime.now();
        self.AV_BILI = None;
        self.AV_dateBILI = datetime.datetime.now();
        
    def F_Ln_BILI_LAj(self, BILI, dateBILI):
        if (BILI == None or (datetime.datetime.now() - dateBILI) > self.Delai_Var_Bio_LA):
            return ln(5);
        else:
            return ln(min(230, max(5, BILI)));
    def F_DFGj(self, CREAT):
        s = 1;
        if (self.sex == 'F'):
            s = 0.742;
        return 186.3 * ((CREAT / 88.4)**(-1.154)) * ((self.age) * (-0.203)) * s;
    def F_Ln_DFG_LAj(self, DIA, CREAT, dateCREAT):
        if (DIA == True):
            return ln(15);
        elif (CREAT == None or (datetime.datetime.now() - dateCREAT) > self.Delai_Var_Bio_LA):
            return ln(150);
        else:
            return ln(min(150, max(1, self.F_DFGj(CREAT)))); 
    def F_ASCD(self):
        if (self.CEC == True):
            return 1
        else:
            return 0;
    def checkLimit(CS, limit):
        result = 1;
        for x in range (0, len(CS)):
            if (CS[x] > limit):
                break;
            result += 1;
        return result;
    def F_DECILE_PNj(self, BNP, PROBNP, dateBNP, datePROBNP): 
        if (self.CEC == True): #|| SIAV || CAT
            return 10
        elif (BNP == None and PROBNP == None):
            return 1;
        elif (PROBNP != None and (datetime.datetime.now() - datePROBNP) <= self.Delai_Var_Bio_LA):
            return checkLimit(self.CS_PROBNP, PROBNP);
        elif (BNP != None and (datetime.datetime.now() - dateBNP) <= self.Delai_Var_Bio_LA):
            return checkLimit(self.CS_BNP, BNP);
        else:
            return 1;
    
    def F_RisquePreGRFj(self):
        return 1.301335 * self.F_ASCD() + 0.157691 * self.F_DECILE_PNj(self.BNP, self.PROBNP, self.dateBNP, self.datePROBNP) - 0.510058 * self.F_Ln_DFG_LAj(self.DIA, self.CREAT, self.dateCREAT) + 0.615711 * self.F_Ln_BILI_LAj(self.BILI, self.dateBILI);
    def F_RisquePreGRFi(self):
        return 1.301335 * self.F_ASCD() + 0.157691 * self.F_DECILE_PNj(self.AV_BNP, self.AV_PROBNP, self.AV_dateBNP, self.AV_datePROBNP) - 0.510058 * self.F_Ln_DFG_LAj(self.AV_DIA, self.AV_CREAT, self.AV_dateCREAT) + 0.615711 * self.F_Ln_BILI_LAj(self.AV_BILI, self.AV_dateBILI);
    def ICARJ(self):
        return min(40, max(0, Arrondi(F_RISQUEPreGRFj() - C_ICAR) * 10));
    def ICARI(self):
        return min(40, max(0, Arrondi(F_RISQUEPreGRFj() - C_ICAR) * 10));
    def ICAR(self):
        if (self.CEC != True and self.DRG != True):
            return ICARJ()
        else:
            return max(ICARj(), ICARI())
    
    def F_ICAR(self):
        IC = self.ICAR()
        if (IC < 31):
            return 1000 * IC / 40
        else:
            return (1000 * IC / 40) + 51
    

def main():
    h = Heart()
    print(h.F_RisquePreGRFj());
if __name__ == "__main__":
    main()
